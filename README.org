Emacs configuration.

Oriented around vim-style keybindings and PHP programming... for the
moment.

Warning: If you want a good easy Emacs starter pack, please go look at
[[https://github.com/bbatsov/prelude][Emacs Prelude]] or [[http://spacemacs.org/][Spacemacs]] or similar.  I've run this code in various
states of breakage, and anticipate more breakage in the future.  That
said, I try to sorta-test before pushing to GitHub.

Do feel free to steal from it though.

* Installation

If you already have a ~.emacs.d~ folder, move that out of the way and
do not throw it away in case you don't want to use my stuff.

Clone the repo into your home directory.  On *nix this should be
obvious.  On Windows you can find it through Win+R and search for
~%appdata%~.

Start up Emacs and pray that something isn't broken.  If it is, fix
it.  Ain't the bleeding edge fun?

I have been using this ~.emacs.d~ with Emacs 26.3.  Since this is a
personal configuration, this may change at any moment, and there are
some plugins that may force me to move to a newer version...

(If you are on Ubuntu 18.04 like me, install ~emacs26~ from [[https://launchpad.net/~kelleyk/+archive/ubuntu/emacs][this PPA]]
to get Emacs 26.3.  I ran into some annoying bugs with ~evil~ and with
the main GNU package server that forced this change!)

NOTE: If you're changing Emacs versions, especially if you're going
backwards (e.g. trying out a development build, then going back to
stable), you may need to blow away the ~elpa/~ directory to get rid of
~.elc~ files built against the newer version.

* Keybindings

The keybindings section is probably forever doomed to be super out of
date.  A while back, I re-oriented myself to work more like Spacemacs,
so almost everything that isn't some kind of Evil binding is hanging
off the Space key.

If you're in a mode where Space doesn't work, ~M-j~ *should* do the
same thing.

Specifically, ~SPC f f~ should open a file switcher and ~SPC b b~
should open a buffer switcher.  But I can't even guarantee those
staying the same, as I've already changed them once before!

* Customizing

I have different needs between work and home (different paths,
different packages); so I've built in the ability to customize the
setup.

Stick any require calls or other customization in ~site-init.el~ -- a
stub ~site-init.el~ should have been created upon first run.  If you
want to install a package off MELPA, use ~use-package~.  If you want
some package that isn't on MELPA, stick it in ~site-lisp/~ and have at
it.
